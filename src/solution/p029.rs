use num_bigint::BigUint;
use num_traits::pow::Pow;
use num_traits::FromPrimitive;
use std::collections::HashSet;

#[deny(missing_docs)]
/// [Distinct powers](https://projecteuler.net/problem=29)
///
/// solve(a, b) returns number of distinct terms in the sequence generated by
/// a ^ b for 2 <= a and 2 <= b
///
/// # Example
///
/// ```
/// assert_eq!(project_euler::solution::p029::solve(5, 5), 15);
/// assert_eq!(project_euler::solution::p029::solve(100, 100), 9183);
/// ```
pub fn solve(a: usize, b: usize) -> usize {
    num_iter::range::<BigUint>(
        FromPrimitive::from_usize(2).unwrap(),
        FromPrimitive::from_usize(a + 1).unwrap(),
    )
    .flat_map(|x| (2..=b).map(move |y| x.pow(y)))
    .collect::<HashSet<_>>()
    .len()
}
